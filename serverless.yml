service: &service
  name: websocket-api

custom:
  service: *service
  prefix: /${self:provider.stage}/${self:custom.service.name}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [chat, Arn]
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
package:
  individually: true
  excludeDevDependencies: true
functions:
  onConnection:
    handler: handler.onConnection
    events:
      - websocket:
          route: $connect
  onDisconnection:
    handler: handler.onDisconnection
    events:
      - websocket:
          route: $disconnect
  sendMessage:
    handler: handler.sendMessage
    events:
      - websocket:
          route: sendMessage

resources:
  Resources:
    chat:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.stage}-chat
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
